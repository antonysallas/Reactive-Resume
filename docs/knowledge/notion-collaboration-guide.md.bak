# Notion Collaboration Guide

This document outlines how Claude Code and the development team collaborate using Notion for project documentation and tracking.

## Overview

We use Notion as a collaborative workspace to track development progress, document issues, and maintain project knowledge. Claude Code can programmatically create, read, and update Notion pages using the Notion API.

## Workspace Structure

### Current Setup

- **Teamspace**: Reactive Resume development workspace
- **Parent Database**: Check the value in the .env `NOTION_PARENT_PAGE_ID`
- **Registry File**: `/docs/knowledge/doc_registry.md`

### Database Properties

- **Page** (title) - Main page title
- **Tags** (multi-select) - Categorization tags (Onboarding, Design)
- **Owner** (people) - Page owner/assignee
- **Verification** (verification) - Content verification status
- **Last edited time** (timestamp) - Auto-updated
- **Last edited by** (person) - Auto-updated

## API Configuration

### Authentication

- **Token**: Read the .env file and look for `NOTION_BEARER_TOKEN`
- **API Base**: `https://api.notion.com/v1`
- **Version**: `2022-06-28`
- **Content Type**: `application/json`

### Key Endpoints Used

- **Database Info**: `GET /v1/databases/{database_id}`
- **Query Database**: `POST /v1/databases/{database_id}/query`
- **Read Page**: `GET /v1/pages/{page_id}`
- **Append Content**: `PATCH /v1/blocks/{page_id}/children`
- **Create Page**: `POST /v1/pages`

## Workflow Process

### 1. Content Creation Workflow

```mermaid
graph LR
    A[Write Markdown] --> B[Convert to JSON]
    B --> C[Store in /docs/knowledge/]
    C --> D[Load JSON via API]
    D --> E[Create/Update Notion Page]
    E --> F[Update Registry]
```

**Steps:**

1. **Create Markdown**: Write content in `.md` format for local documentation
2. **Convert to JSON**: Transform markdown to Notion API block structure
3. **Store JSON**: Save in `/docs/knowledge/*.json` for reusability
4. **API Upload**: Use JSON file with curl to create/update Notion content
5. **Update Registry**: Add new pages to `doc_registry.md`

### 2. Content Types Supported

#### Text Elements

- Headings (h1, h2, h3)
- Paragraphs with rich text formatting
- Bulleted and numbered lists
- Code blocks with syntax highlighting

#### Interactive Elements

- To-do lists with checkboxes
- Tables (limited support)
- Links to external resources

#### Formatting

- **Bold**, *italic*, `code`, ~~strikethrough~~
- Colors and annotations
- Nested lists and indentation

### 3. Page Management

#### Creating New Pages

```bash
# Template for creating a new page
curl -X POST 'https://api.notion.com/v1/pages' \
  -H 'Authorization: Bearer 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' \
  -H 'Content-Type: application/json' \
  -H 'Notion-Version: 2022-06-28' \
  -d @"/path/to/content.json"
```

#### Updating Registry

After creating pages, always update:

```markdown
| [New Page Title](https://www.notion.so/New-Page-{id}) | `page-id` | tags | owner |
```

## Important Considerations

### Permission Management

- **Teamspace vs Personal**: Pages moved to Teamspace may require re-sharing
- **Token Persistence**: Original integration tokens maintain access even after Teamspace migration
- **New Integrations**: Each Teamspace integration needs separate permissions

### Content Limitations

- **File Size**: Large JSON payloads may need to be split
- **API Limits**: Notion has rate limits for API calls
- **Block Limits**: Complex nested structures have depth limitations

### Best Practices

1. **Always Test Access**: Verify token permissions before bulk operations
2. **Backup Content**: Maintain local markdown copies of all content
3. **Update Registry**: Keep page registry current for easy reference
4. **Use Templates**: Store JSON templates for consistent formatting

## Troubleshooting

### Common Issues

#### Access Problems

- **404 Errors**: Check if page was moved to different workspace
- **401 Unauthorized**: Verify token is correct and has permissions
- **Page vs Database**: Use correct endpoint type (`/pages/` vs `/databases/`)

#### Content Issues

- **JSON Validation**: Ensure proper Notion block structure
- **Rich Text Formatting**: Check annotations syntax
- **URL Generation**: Verify page IDs are correctly formatted

### Recovery Steps

1. **Check Token**: Verify in `.env` file
2. **Test Simple Query**: Start with basic page/database retrieval
3. **Validate JSON**: Use online JSON validators for payloads
4. **Check Permissions**: Ensure integration has access to target pages

### Detailed Error Resolution Guide

Based on real troubleshooting experience with the PDF Generation Fix documentation (May 22, 2025):

#### Parent Type Configuration Errors

**Problem**: Using wrong parent type in JSON payload

```json
// ❌ Wrong - Creates child page
"parent": {
  "page_id": "1fba94d4-8e10-81d0-8d9d-fd8dd1ed9355"
}

// ✅ Correct - Creates database entry
"parent": {
  "database_id": "1fba94d4-8e10-81d0-8d9d-fd8dd1ed9355"
}
```

**Solution**: Always use `database_id` when creating entries in a database, `page_id` only for child pages.

#### Properties Schema Mismatch

**Problem**: Using generic property names instead of database-specific schema

```json
// ❌ Wrong - Generic properties
"properties": {
  "title": { "title": [...] },
  "Status": { "select": {...} },
  "Priority": { "select": {...} }
}

// ✅ Correct - Database schema properties
"properties": {
  "Page": { "title": [...] },
  "Tags": { "multi_select": [...] },
  "Owner": { "people": [...] }
}
```

**Solution**:

1. Query database schema first: `GET /v1/databases/{id}`
2. Match exact property names and types from the schema
3. Use correct property value structures

#### Language Specification Errors

**Problem**: Notion code blocks reject invalid language identifiers

```json
// ❌ Wrong
"language": "plain_text"

// ✅ Correct
"language": "plain text"
```

**Valid Languages**: `"plain text"`, `"javascript"`, `"typescript"`, `"bash"`, `"yaml"`, etc.

#### Token Permission Issues

**Problem**: Integration token lacks access to target database/page

**Debugging Steps**:

1. Test basic access: `curl -X GET 'https://api.notion.com/v1/databases/{id}' -H 'Authorization: Bearer {token}'`
2. If 404: Check if page was moved to different workspace
3. If 401: Verify token in `.env` file and integration permissions
4. Re-share page/database with integration if needed

#### Multi-Select Value Format

**Problem**: Incorrect multi-select property structure

```json
// ❌ Wrong
"Tags": {
  "multi_select": {
    "name": "Bug"
  }
}

// ✅ Correct
"Tags": {
  "multi_select": [
    {
      "name": "Bug"
    }
  ]
}
```

#### User ID References

**Problem**: Using incorrect user ID format in people properties

**Solution**:

1. Get valid user IDs from database query response
2. Use exact format: `{"object": "user", "id": "user-uuid"}`
3. Check that user has access to the workspace

### Prevention Checklist

Before creating any Notion content:

- [ ] **Test Database Access**: `GET /v1/databases/{id}` to verify permissions
- [ ] **Review Schema**: Check property names, types, and required fields
- [ ] **Validate JSON**: Use JSON validator for structure verification
- [ ] **Test Parent Type**: Confirm `database_id` vs `page_id` usage
- [ ] **Check Language Specs**: Verify code block language identifiers
- [ ] **Validate User IDs**: Ensure people property references are correct

### API Response Analysis

When an API call fails:

1. **Read Error Message**: Notion provides specific validation feedback
2. **Check Request ID**: Use for debugging with Notion support if needed
3. **Verify Endpoint**: Ensure using correct API version and endpoint
4. **Test Incrementally**: Start with minimal payload, add complexity gradually

### Performance Optimization

To avoid multiple failed attempts:

1. **Schema-First Approach**: Always query database schema before creating content
2. **Template Validation**: Test JSON templates with simple content first
3. **Staged Creation**: Create page structure first, add complex content later
4. **Batch Validation**: Validate all JSON files before API calls

## File Organization

### Local Documentation Structure

```
docs/knowledge/
├── doc_registry.md          # Page registry
├── notion-collaboration-guide.md            # This guide
├── reactive-resume-troubleshooting.md       # Local markdown
├── reactive-resume-troubleshooting-notion.json  # Notion API payload
└── *.json                                   # Future content templates
```

### Naming Conventions

- **Markdown Files**: `{project-name}-{content-type}.md`
- **JSON Templates**: `{project-name}-{content-type}-notion.json`
- **Page IDs**: Always use UUID format without hyphens for API

## Future Enhancements

### Planned Features

- [ ] Automated page creation scripts
- [ ] Bulk content migration tools
- [ ] Template library for common page types
- [ ] Integration with Git hooks for auto-updates

### Integration Opportunities

- [ ] Link with GitHub issues/PRs
- [ ] Sync with development status updates
- [ ] Automated documentation generation
- [ ] Team notification system

## Quick Reference

### Essential Commands

```bash
# Check database access
curl -X GET 'https://api.notion.com/v1/databases/{id}' -H 'Authorization: Bearer {token}' -H 'Notion-Version: 2022-06-28'

# Query database entries
curl -X POST 'https://api.notion.com/v1/databases/{id}/query' -H 'Authorization: Bearer {token}' -H 'Content-Type: application/json' -H 'Notion-Version: 2022-06-28' -d '{}'

# Create page from JSON
curl -X POST 'https://api.notion.com/v1/pages' -H 'Authorization: Bearer {token}' -H 'Content-Type: application/json' -H 'Notion-Version: 2022-06-28' -d @"content.json"
```

### Important URLs

- **Main Database**: <https://www.notion.so/1fba94d48e1081d08d9dfd8dd1ed9355>
- **Notion API Docs**: <https://developers.notion.com/reference>
- **Registry File**: `/docs/knowledge/doc_registry.md`

---

This guide serves as our collaboration blueprint. Update it as we discover new patterns and improve our workflow.
